thing PumpSystem includes TimerMsgs , SensorMsgs , PumpMsgs {
	required port sbcb {
		receives sensor_ON receives sensor_OFF
	}
	required port sbca {
		receives sensor_ON receives sensor_OFF
	}
	required port sacb {
		receives sensor_ON receives sensor_OFF
	}
	required port saca {
		receives sensor_ON receives sensor_OFF
	}
	required port pump {
		sends pump_ON sends pump_OFF
	}
	statechart PumpSystem init OFF {
		state OFF {
			on entry do
				pump!pump_OFF()
			end
			transition -> ON
			event e : sbcb?sensor_ON
		}
		state ON {
			on entry do
				pump!pump_ON()
			end
			transition -> OFF
			event e : sbcb?sensor_ON
		}
	}
}
thing fragment SensorMsgs {
	message sensor_ON()
	message sensor_OFF()
}
thing Sensor includes SensorMsgs , TimerMsgs {
	required port clock {
		receives ms25_tic
	}
	provided port ctrl {
		sends sensor_ON sends sensor_OFF
	}
	property PIN : UInt8 = 10
	function setDigitalInput(pin : UInt8) do
		`pinMode(` & pin & `, INPUT);`
	end
	function enoughWater() : Boolean do
		return `digitalRead(` & PIN & `);`
	end
	statechart Sensor init OFF {
		on entry setDigitalInput(PIN)
		state OFF {
			transition -> ON
			event clock?ms25_tic
			guard enoughWater()
			action ctrl!sensor_ON()
		}
		state ON {
			transition -> OFF
			event clock?ms25_tic
			guard not enoughWater()
			action ctrl!sensor_OFF()
		}
	}
}
thing fragment PumpMsgs {
	message pump_ON()
	message pump_OFF()
}
thing Pump includes PumpMsgs {
	provided port notify {
		receives pump_ON receives pump_OFF
	}
	property PIN : UInt8 = 7
	function switch(value : DigitalState) do
		`analog(` & PIN & `, ` & value & `)`
	end
	statechart Pump init OFF {
		state OFF {
			on entry switch(DigitalState : LOW)
			transition -> ON
			event notify?pump_ON
		}
		state ON {
			on entry switch(DigitalState : HIGH)
			transition -> OFF
			event notify?pump_OFF
		}
	}
}
datatype Char<1>
	@type_checker "Integer"
	@c_type "char"
	@c_byte_size "1"
object String
	@type_checker "String"
	@c_type "char *"
	@c_byte_size "2"
datatype Boolean<1>
	@type_checker "Boolean"
	@c_type "uint8_t"
	@c_byte_size "1"
datatype UInt8<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
datatype UInt16<2>
	@type_checker "Integer"
	@c_type "uint16_t"
	@c_byte_size "2"
	@java_type "int"
	@java_primitive "true"
datatype Int16<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
datatype UInt32<4>
	@type_checker "Integer"
	@c_type "uint32_t"
	@c_byte_size "4"
datatype Integer<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
datatype Long<4>
	@type_checker "Integer"
	@c_type "long"
	@c_byte_size "4"
datatype Float<4>
	@type_checker "Real"
	@c_type "float"
	@c_byte_size "4"
enumeration DigitalState
	@c_byte_size "1"
	@c_type "uint8_t"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
datatype Byte<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
	@java_primitive "true"
	@scala_type "Byte"
	@SenML_type "Double"
enumeration DigitalState
	@c_type "uint8_t"
	@c_byte_size "1"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
thing fragment TimerMsgs {
	message timer_start(id : UInt8, time : UInt32)
	@timer_start "true" message timer_cancel(id : UInt8)
	@timer_cancel "true" message timer_timeout(id : UInt8)
	@timeout "true" message ms25_tic()
	@xms_tic "25"
	message ms500_tic()
	@xms_tic "500" message ms1000_tic()
	@xms_tic "1000"
}
protocol Timer

configuration PumpSystem {
	instance pumpSystem : PumpSystem
	instance pump : Pump
	instance sbcb : Sensor
	instance sacb : Sensor
	instance sbca : Sensor
	instance saca : Sensor
	connector pumpSystem.sbcb => sbcb . ctrl
	connector pumpSystem.sacb => sacb . ctrl
	connector pumpSystem.sbca => sbca . ctrl
	connector pumpSystem.saca => saca . ctrl
	connector pumpSystem.pump => pump . notify
	connector sbcb.clock over Timer
	connector sacb.clock over Timer
	connector sbca.clock over Timer
	connector saca.clock over Timer
	set sbcb.PIN = 7
	set sacb.PIN = 8
	set sbca.PIN = 9
	set saca.PIN = 10
}
